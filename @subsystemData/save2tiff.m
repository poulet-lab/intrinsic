function save2tiff(obj,filename,data,timestamp)
% Store DATA to (multipage) TIFF file

% If no timestamp was supplied use the current time
if ~exist('timestamp','var')
    timestamp = now;
end

% TIFF options
options = struct( ...
    'ImageWidth',          size(data,2), ...
    'ImageLength',         size(data,1), ...
    'Photometric',         Tiff.Photometric.MinIsBlack, ...
    'Compression',         Tiff.Compression.LZW, ...
    'PlanarConfiguration', Tiff.PlanarConfiguration.Chunky, ...
    'BitsPerSample',       16, ...
    'SamplesPerPixel',     size(data,3), ...
    'ResolutionUnit',      Tiff.ResolutionUnit.Centimeter, ...
    'Software',            sprintf('Intrinsic Imaging %s',intrinsic.version'), ...
    'Make',                obj.P.Camera.Adaptor, ...
    'Model',               obj.P.Camera.DeviceName, ...
    'DateTime',            datestr(timestamp,'yyyy:mm:dd HH:MM:SS'), ...
    'SampleFormat',        Tiff.SampleFormat.UInt, ...
    'RowsPerStrip',        512);

% Add scale if available
if ~isnan(obj.Parent.Scale.PxPerCm)
    options.XResolution = round(obj.Parent.Scale.PxPerCm);
    options.YResolution = options.XResolution;
end

% Manage ImageDescription field
desc = sprintf(['ImageJ=\nimages=%d\nframes=%d\nslices=1\n' ...
    'hyperstack=false\nunit=cm\n'],size(data,4),size(data,4));
if size(data,4) > 1
    desc = sprintf('%sfinterval=%0.5f\nfps=%0.5f\n',...
        desc,1/obj.P.Camera.FrameRate,obj.P.Camera.FrameRate);
end
options.ImageDescription = desc;

% Save to TIFF
tiff = Tiff(fullfile(obj.DirTemp,filename),'w');
for frame = 1:size(data,4)
    tiff.setTag(options);
    tiff.write(data(:, :, :, frame));
    if frame < size(data,4)
        tiff.writeDirectory();
    end
end
tiff.close()